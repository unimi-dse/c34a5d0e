library(gradecalculator)
library(gradecalculator)
#' GradeCalculatorGUI
#'
#' Runs a Graphical User Interface to calculate your final degree
#'
#' @return shiny app
#' @export
#'
GradeCalculatorGUI <- function(){
shiny::runApp(system.file("shiny/GradeCalculatorApp", package = "gradecalculator"))
}
GradeCalculatorGUI()
library(gradecalculator)
library(gradecalculator)
library(gradecalculator)
#' GradeCalculatorGUI
#'
#' Runs a Graphical User Interface to calculate your final degree
#'
#' @return shiny app
#' @export
#'
GradeCalculatorGUI <- function(){
shiny::runApp(system.file("shiny/GradeCalculatorApp", package = "gradecalculator"))
}
#' GradeCalculatorGUI
#'
#' Runs a Graphical User Interface to calculate your final degree
#'
#' @return shiny app
#' @export
#'
GradeCalculatorGUI <- function(){
shiny::runApp(system.file("shiny/GradeCalculatorApp", package = "gradecalculator"))
}
GradeCalculatorGUI <- function(){
shiny::runApp(system.file("shiny/GradeCalculatorApp", package = "gradecalculator"))
}
GradeCalculatorGUI()
GradeCalculatorGUI()
StudentsDistribution <- function(){
LAND_ISO <- c("AUT","BEL","BGR","HRV","CYP","CZE","DNK","EST","FIN","FRA","DEU","GRC","HUN","IRL","ITA","LVA","LTU","LUX","MLT","NLD","POL","PRT","ROU","SVK","SVN","ESP","SWE","GBR")
DfDSE <- read.csv(system.file("extdata", package = "gradecalculator"))
Nations <- unique(DfDSE$Nationality)
StdntPerNation <- vector()
for(Nation in Nations){
i <- DfDSE$Nationality == Nation
StdntPerNation <- c(StdntPerNation,length(unique(DfDSE$Students[i])))
}
MyData <- data.frame(StdntPerNation, Nations)
colnames(MyData) <- c("Students", "Nation")
df <- data.frame(LAND_ISO)
colnames(df) <- "Nation"
total <- merge(MyData,df,by.x="Nation", by.y="Nation", all=TRUE)
total[is.na(total)] <- 0
g <- list(
scope = 'europe')
p <- plot_geo(total) %>%
add_trace(
z = ~Students, locations = ~Nation,
color = ~Students, colors = 'Purples'
) %>%
colorbar(title = "") %>%
layout(geo = g
)
return(p)
}
StudentsDistribution()
StudentsDistribution <- function(){
LAND_ISO <- c("AUT","BEL","BGR","HRV","CYP","CZE","DNK","EST","FIN","FRA","DEU","GRC","HUN","IRL","ITA","LVA","LTU","LUX","MLT","NLD","POL","PRT","ROU","SVK","SVN","ESP","SWE","GBR")
DfDSE <- read.csv(system.file("extdata", package = "gradecalculator"))
Nations <- unique(DfDSE$Nationality)
StdntPerNation <- vector()
for(Nation in Nations){
i <- DfDSE$Nationality == Nation
StdntPerNation <- c(StdntPerNation,length(unique(DfDSE$Students[i])))
}
MyData <- data.frame(StdntPerNation, Nations)
colnames(MyData) <- c("Students", "Nation")
df <- data.frame(LAND_ISO)
colnames(df) <- "Nation"
total <- merge(MyData,df,by.x="Nation", by.y="Nation", all=TRUE)
total[is.na(total)] <- 0
g <- list(
scope = 'europe')
p <- plot_geo(total) %>%
add_trace(
z = ~Students, locations = ~Nation,
color = ~Students, colors = 'Purples'
) %>%
colorbar(title = "") %>%
layout(geo = g
)
return(p)
}
StudentsDistribution()
LAND_ISO <- c("AUT","BEL","BGR","HRV","CYP","CZE","DNK","EST","FIN","FRA","DEU","GRC","HUN","IRL","ITA","LVA","LTU","LUX","MLT","NLD","POL","PRT","ROU","SVK","SVN","ESP","SWE","GBR")
DfDSE <- read.csv(system.file("extdata", package = "gradecalculator"))
Nations <- unique(DfDSE$Nationality)
StdntPerNation <- vector()
for(Nation in Nations){
i <- DfDSE$Nationality == Nation
StdntPerNation <- c(StdntPerNation,length(unique(DfDSE$Students[i])))
}
MyData <- data.frame(StdntPerNation, Nations)
colnames(MyData) <- c("Students", "Nation")
df <- data.frame(LAND_ISO)
colnames(df) <- "Nation"
total <- merge(MyData,df,by.x="Nation", by.y="Nation", all=TRUE)
total[is.na(total)] <- 0
g <- list(
scope = 'europe')
p <- plot_geo(total) %>%
add_trace(
z = ~Students, locations = ~Nation,
color = ~Students, colors = 'Purples'
) %>%
colorbar(title = "") %>%
layout(geo = g
)
return(p)
}
StudentsDistribution()
library(gradecalculator)
weightedaverage()
weightedaverage("Giorgia")
weightedaverage("Giorgia")
system.file("extdata", package = "gradecalculator")
#' Weighted Average
#'
#' Takes the list of students, calculates weighted average of all the courses of the students and computes the final degree classification
#' @param Students it's the list of students which you want to calculate the final degree classification
#' @return final degree classification
#' @export
#' @importFrom utils read.csv
#' @importFrom stats weighted.mean
#'
weightedaverage<- function (Students){
DfDSE <- read.csv(system.file("exdata", package = "gradecalculator"))
result<- vector()
for(Student in Students){
i <- DfDSE$Student == Student
scores<-DfDSE$Score[i]
cfu<-DfDSE$Cfu[i]
result<- c(result, weighted.mean(scores, cfu, na.rm = TRUE)*110/30)
}
return(result)
}
weightedaverage("Giorgia")
(system.file("exdata", package = "gradecalculator")
system.file("exdata", package = "gradecalculator")
system.file("exdata", package = "gradecalculator")
library(gradecalculator)
library(gradecalculator)
weightedaverage("Giorgia")
system.file("exdata", package = "gradecalculator")
library(gradecalculator)
library(gradecalculator)
library(MyPackage)
library(gradecalculator)
library(gradecalculator)
weightedaverage("Giorgia")
system.file("exdata", package = "gradecalculator")
#' Weighted Average
#'
#' Takes the list of students, calculates weighted average of all the courses of the students and computes the final degree classification
#' @param Students it's the list of students which you want to calculate the final degree classification
#' @return final degree classification
#' @export
#' @importFrom utils read.csv
#' @importFrom stats weighted.mean
#'
weightedaverage<- function (Students){
DfDSE <- read.csv(system.file("extdata", package = "gradecalculator"))
result<- vector()
for(Student in Students){
i <- DfDSE$Student == Student
scores<-DfDSE$Score[i]
cfu<-DfDSE$Cfu[i]
result<- c(result, weighted.mean(scores, cfu, na.rm = TRUE)*110/30)
}
return(result)
}
weightedaverage("Giorgia")
system.file("extdata", package = "gradecalculator")
#' Weighted Average
#'
#' Takes the list of students, calculates weighted average of all the courses of the students and computes the final degree classification
#' @param Students it's the list of students which you want to calculate the final degree classification
#' @return final degree classification
#' @export
#' @importFrom utils read.csv
#' @importFrom stats weighted.mean
#'
weightedaverage<- function (Students){
DfDSE <- read.csv(system.file("extdata", package = "gradecalculator"))
result<- vector()
for(Student in Students){
i <- DfDSE$Student == Student
scores<-DfDSE$Score[i]
cfu<-DfDSE$Cfu[i]
result<- c(result, weighted.mean(scores, cfu, na.rm = TRUE)*110/30)
}
return(result)
}
weightedaverage("Giorgia")
#' StudentsDistribution
#'
#' Enumerates students by nationality
#' @return map of the students' nationality for this class
#' @export
#' @importFrom utils read.csv
#' @importFrom plotly plot_geo add_trace colorbar layout "%>%"
#'
StudentsDistribution <- function(){
LAND_ISO <- c("AUT","BEL","BGR","HRV","CYP","CZE","DNK","EST","FIN","FRA","DEU","GRC","HUN","IRL","ITA","LVA","LTU","LUX","MLT","NLD","POL","PRT","ROU","SVK","SVN","ESP","SWE","GBR")
DfDSE <- read.csv(system.file("extdata", package = "gradecalculator"))
Nations <- unique(DfDSE$Nationality)
StdntPerNation <- vector()
for(Nation in Nations){
i <- DfDSE$Nationality == Nation
StdntPerNation <- c(StdntPerNation,length(unique(DfDSE$Students[i])))
}
MyData <- data.frame(StdntPerNation, Nations)
colnames(MyData) <- c("Students", "Nation")
df <- data.frame(LAND_ISO)
colnames(df) <- "Nation"
total <- merge(MyData,df,by.x="Nation", by.y="Nation", all=TRUE)
total[is.na(total)] <- 0
g <- list(
scope = 'europe')
p <- plot_geo(total) %>%
add_trace(
z = ~Students, locations = ~Nation,
color = ~Students, colors = 'Purples'
) %>%
colorbar(title = "") %>%
layout(geo = g
)
return(p)
}
StudentsDistribution()
system.file("extdata", package = "gradecalculator")
system.file("extdata/FileDse.csv", package = "gradecalculator")
#' Weighted Average
#'
#' Takes the list of students, calculates weighted average of all the courses of the students and computes the final degree classification
#' @param Students it's the list of students which you want to calculate the final degree classification
#' @return final degree classification
#' @export
#' @importFrom utils read.csv
#' @importFrom stats weighted.mean
#'
weightedaverage<- function (Students){
DfDSE <- read.csv(system.file("extdata/FileDse.csv", package = "gradecalculator"))
result<- vector()
for(Student in Students){
i <- DfDSE$Student == Student
scores<-DfDSE$Score[i]
cfu<-DfDSE$Cfu[i]
result<- c(result, weighted.mean(scores, cfu, na.rm = TRUE)*110/30)
}
return(result)
}
system.file("extdata/FileDse.csv", package = "gradecalculator")
#' Weighted Average
#'
#' Takes the list of students, calculates weighted average of all the courses of the students and computes the final degree classification
#' @param Students it's the list of students which you want to calculate the final degree classification
#' @return final degree classification
#' @export
#' @importFrom utils read.csv
#' @importFrom stats weighted.mean
#'
weightedaverage<- function (Students){
DfDSE <- read.csv(system.file("extdata/FileDse.csv", package = "gradecalculator"))
result<- vector()
for(Student in Students){
i <- DfDSE$Student == Student
scores<-DfDSE$Score[i]
cfu<-DfDSE$Cfu[i]
result<- c(result, weighted.mean(scores, cfu, na.rm = TRUE)*110/30)
}
return(result)
}
weightedaverage("Giorgia")
weightedaverage("Gerolamo")
#' Adjusted Final Degree Classification
#'
#' Takes a possible score to all the exams that you still need to do and calculates your "adjusted" final degree
#' @param score it's one possible mark between 18 and 30 that you can take in your missing exams
#' @return adjusted final degree classification
#' @export
#' @importFrom utils read.csv
#'
adjustedfinaldegree <- function (score){
DfDSE <- read.csv(system.file("extdata/FileDse.csv", package = "gradecalculator"))
if(score < 18 | score >33)
print("Insert a value between 18 and 33")
else{
i <- is.na(DfDSE$Score)
DfDSE$Score[i] <- score
Students<-DfDSE$Students[i]
Subjects<-DfDSE$Subject[i]
CFUs<-DfDSE$Cfu[i]
Scores <- DfDSE$Score[i]
VotoLaurea<-weightedaverage(Students)
df <- data.frame('Stdents' = Students, 'Subjects' = Subjects, 'cfu' = CFUs, 'Score'= Scores, 'AdjFinalDegree' = VotoLaurea)
}
return(df)
}
adjustedfinaldegree("Gerolamo")
adjustedfinaldegree()
adjustedfinaldegree("18")
TermFreqency()
TermFreqency()
library(gradecalculator)
TermFrequency()
TermFrequency()
TermFrequency()
#' TermFrequency
#'
#' This function reads the data into the dataframe how many exams have been in a term
#' @return plot of the density of exams in a term
#' @export
#' @importFrom utils read.csv
#' @importFrom plotly plot_ly
#'
TermFreqency <- function(){
DfDSE <- read.csv(system.file("extdata/FileDse.csv", package = "gradecalculator"))
Students<-unique(DfDSE$Student)
TermFreq <- table(DfDSE$Date)
Density <- as.vector(TermFreq)
Term <- names(TermFreq)
p <- plot_ly(x = ~Term, y = ~Density, type = 'scatter', mode = 'lines')
return(p)
}
TermFreqency()
#' Score Density
#'
#' This function reads the data into the dataframe and calculates how many times occur a certain score
#' @return plot of the Score density
#' @export
#' @importFrom utils read.csv
#' @importFrom plotly plot_ly
#'
ScoreDensity <- function(){
DfDSE <- read.csv(system.file("extdata/FileDse.csv", package = "gradecalculator"))
tabella <- table(DfDSE$Score)
Density <- as.vector(tabella)
Scores <- names(tabella)
p <- plot_ly(ggplot2::diamonds, y = ~Density, color = ~Scores, type = "box")
return(p)
}
ScoreDensityForStudent()
ScoreDensity()
library(gradecalculator)
ScoreDensity()
adjustedfinaldegree()
adjustedfinaldegree(18)
detach("package:MyPackage", unload = TRUE)
ScoreDensityForStudent()
ScoreDensity()
ScoreDensityForStudent()
GradeCalculatorGUI()
StudentsDistribution()
TermFreqency()
remove.packages("MyPackage", lib="~/R/win-library/3.6")
TermFreqency()
StudentsDistribution()
ScoreDensityForStudent()
library(plotly)
ScoreDensity()
library(gradecalculator)
ScoreDensity()
library(devtools)
library(gradecalculator)
library(gradecalculator)
weightedaverage("Giorgia")
adjustedfinaldegree(18)
weightedaverageGUI()
TermFreqency()
ScoreDensity()
ScoreDensityForStudent()
